import asyncio
from datetime import datetime
import time
from typing import Any, Dict, List, Tuple
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
import re

from config import CHECK_EVERY_SEC, REPORT_EVERY_SEC, TELEGRAM_BOT_TOKEN, SUBS_JSON
from data import Storage
from infobus_client import InfobusClient
from points import list_points, resolve_city_or_id, search_points

client = InfobusClient()
storage = Storage(SUBS_JSON)
router = Router()

async def checker_loop(bot: Bot):
    while True:
        try:
            subs = storage.list_all_subs()
            checks_count = int(storage.get_meta("checks_count") or "0") + 1

            for s in subs:
                try:
                    # 1) –ø–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                    routes_json: Dict[str, Any] = client.get_routes(
                        city_from_id=s.city_from_id,
                        city_to_id=s.city_to_id,
                        from_name=s.from_name,
                        to_name=s.to_name,
                        date_from=s.date_str,
                        screen_width=2560,
                        screen_height=1305,
                    )
                    # 2) —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –≤—Ä–µ–º–µ–Ω
                    times = client.extract_times(routes_json)

                    # –µ—Å—Ç—å –ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ?
                    matches = [t for t in times if in_range(t["depart"], s.dep_from_hhmm, s.dep_to_hhmm)]
                    has_matches = len(matches) > 0

                    # 3) —Å—á–∏—Ç–∞–µ–º —Ö—ç—à –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É (–¥–ª—è –∞–Ω—Ç–∏–¥—É–±–ª–µ–π)
                    new_hash = hash_times_in_range(times, s.dep_from_hhmm, s.dep_to_hhmm)

                    # 4) –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç: —Ä–∞–∑ –≤ REPORT_EVERY_SEC, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
                    now_ts = int(time.time())
                    last_report_ts = int(storage.get_meta(f"sub:{s.id}:last_report_ts") or "0")
                    must_periodic_report = has_matches and (now_ts - last_report_ts >= REPORT_EVERY_SEC)

                    # 5) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏: (–ê) –ø–æ—è–≤–∏–ª–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏–ª–∏ (–ë) –ø–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è
                    is_change = bool(new_hash) and (new_hash != s.last_hash)
                    should_send = is_change or must_periodic_report

                    if should_send and has_matches:
                        header = "‚ö°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ" if is_change else "‚è± –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç"
                        lines = [
                            f"{header} –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ #{s.id}:",
                            f"{s.date_str} {s.from_name}({s.city_from_id}) ‚Üí {s.to_name}({s.city_to_id})",
                            f"–¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è {s.dep_from_hhmm}‚Äì{s.dep_to_hhmm}",
                            "",
                        ]
                        for t in matches:
                            lines.append(f"‚Ä¢ {t['depart']} ‚Üí {t['arrive']}  (‚Ç¨{t['price_eur']}, ‚≠ê {t['rating']})")

                        await bot.send_message(chat_id=s.user_id, text="\n".join(lines))

                        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á—ë—Ç–∞
                        if new_hash:
                            storage.update_last_hash(s.id, new_hash)
                        storage.set_meta(f"sub:{s.id}:last_report_ts", str(now_ts))

                except Exception as e:
                    # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
                    print(f"[checker] sub {s.id} error: {e}")

            storage.set_meta("last_check_ts", str(int(time.time())))
            storage.set_meta("checks_count", str(checks_count))

        except Exception as e:
            print(f"[checker] loop error: {e}")

        await asyncio.sleep(CHECK_EVERY_SEC)


def hhmm_to_int(hhmm: str) -> int:
    m = re.match(r"^(\d{1,2}):(\d{2})$", hhmm)
    if not m:
        return 0
    return int(m.group(1)) * 100 + int(m.group(2))

def in_range(hhmm: str, start_hhmm: str, end_hhmm: str) -> bool:
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (–µ—Å–ª–∏ end < start)."""
    v = hhmm_to_int(hhmm)
    a = hhmm_to_int(start_hhmm)
    b = hhmm_to_int(end_hhmm)
    if a <= b:
        return a <= v <= b
    else:
        return v >= a or v <= b

def hash_times_in_range(times: List[Dict[str, str]], dep_from: str, dep_to: str) -> str:
    picked = [f"{t['depart']}->{t['arrive']}" for t in times if in_range(t['depart'], dep_from, dep_to)]
    return "|".join(picked)

def format_last_results(last_hash: str) -> str:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç last_hash –≤–∏–¥–∞ 'HH:MM->HH:MM|HH:MM->HH:MM|...' –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
    """
    if not last_hash:
        return "‚Äî –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–π—Å–æ–≤)"
    parts = [p for p in last_hash.split("|") if p.strip()]
    if not parts:
        return "‚Äî –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—â—ë –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–π—Å–æ–≤)"
    lines = []
    for p in parts:
        if "->" in p:
            dep, arr = p.split("->", 1)
            lines.append(f"‚Ä¢ {dep} ‚Üí {arr}")
    return "\n".join(lines) if lines else "‚Äî –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

HELP = (
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/subscribe <date> <from> <to> <fromHH:MM> <toHH:MM>\n"
    "  –≥–¥–µ <from>/<to> ‚Äî –õ–ò–ë–û id (–Ω–∞–ø—Ä–∏–º–µ—Ä 78/2), –õ–ò–ë–û –∏–º—è —Ç–æ—á–∫–∏ (Vilnius/Minsk)\n"
    "  –ø—Ä–∏–º–µ—Ä: /subscribe 01.09.2025 78 2 20:00 23:00\n"
    "          /subscribe 01.09.2025 Vilnius Minsk 20:00 23:00\n"
    "/subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
    "/status ‚Äî –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏—Ñ –∏ –∫–∞–∫–∏–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
    "/unsubscribe <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
    "/points [query] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ (–∏–ª–∏ –ø–æ–∏—Å–∫)\n"
)

def ensure_city(token: str) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (city_id, canonical_name).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∏—Å—Ç—ã–π ID –∏ –∞–ª–∏–∞—Å—ã/–∏–º–µ–Ω–∞.
    """
    res = resolve_city_or_id(token)
    if not res:
        raise ValueError(f"–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é —Ç–æ—á–∫—É: {token}")
    return res  # (id, canonical)

@router.message(Command("start"))
async def start_cmd(m: Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è –∑–∞ –±–∏–ª–µ—Ç–∞–º–∏.\n" + HELP)

@router.message(Command("points"))
async def points_cmd(m: Message, command: CommandObject):
    q = (command.args or "").strip()
    rows = search_points(q) if q else list_points()
    if not rows:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π /points –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        return
    rows = sorted(rows, key=lambda x: (x[1].lower(), x[0]))
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏:\n" + "\n".join([f"‚Ä¢ {name} ‚Äî id {cid}" for cid, name in rows])
    await m.answer(text)

@router.message(Command("subscribe"))
async def subscribe_cmd(m: Message, command: CommandObject):
    """
    –í–∞—Ä–∏–∞–Ω—Ç—ã:
      /subscribe 01.09.2025 78 2 20:00 23:00
      /subscribe 01.09.2025 Vilnius Minsk 20:00 23:00
    """
    if not command.args:
        await m.answer("–§–æ—Ä–º–∞—Ç:\n" + HELP)
        return

    parts = command.args.split()
    if len(parts) < 5:
        await m.answer("–ú–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /subscribe 01.09.2025 78 2 20:00 23:00")
        return

    date_str = parts[0]
    from_token = parts[1]
    to_token = parts[2]
    dep_from_hhmm = parts[-2]
    dep_to_hhmm = parts[-1]

    # —Ä–µ–∑–æ–ª–≤–∏–º —Ç–æ—á–∫–∏ –≤ id
    try:
        city_from_id, from_canonical = ensure_city(from_token)
        city_to_id, to_canonical = ensure_city(to_token)
    except ValueError as e:
        await m.answer(str(e) + "\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: /points –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫.")
        return
    
    if m.from_user is None:
        await m.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    

    
    sid = storage.add_sub(
        user_id=m.from_user.id,
        city_from_id=city_from_id,
        city_to_id=city_to_id,
        from_name=from_canonical,
        to_name=to_canonical,
        date_str=date_str,
        dep_from_hhmm=dep_from_hhmm,
        dep_to_hhmm=dep_to_hhmm,
    )

    await m.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
        f"{date_str} {from_canonical}({city_from_id}) ‚Üí {to_canonical({city_to_id}) if False else to_canonical}({city_to_id}) "
        f"–≤ {dep_from_hhmm}‚Äì{dep_to_hhmm}"
    )

@router.message(Command("unsubscribe"))
async def unsubscribe_cmd(m: Message, command: CommandObject):
    if not command.args:
        await m.answer("–£–∫–∞–∂–∏ ID: /unsubscribe <id>")
        return
    try:
        sid = int(command.args.strip())
    except ValueError:
        await m.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if m.from_user is None:
        await m.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    ok = storage.del_sub(m.from_user.id, sid)
    await m.answer(f"üóë –ü–æ–¥–ø–∏—Å–∫–∞ #{sid} —É–¥–∞–ª–µ–Ω–∞." if ok else "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –ø–æ–¥–ø–∏—Å–∫—É.")

@router.message(Command("subs"))
async def subs_cmd(m: Message):
    items = storage.list_subs(m.from_user.id if m.from_user else 0)
    if not items:
        await m.answer("–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.")
        return
    lines = []
    for s in items:
        lines.append(
            f"#{s.id} {s.date_str} {s.from_name}({s.city_from_id}) ‚Üí {s.to_name}({s.city_to_id}) "
            f"–≤ {s.dep_from_hhmm}‚Äì{s.dep_to_hhmm}"
        )
    await m.answer("\n".join(lines))

@router.message(Command("status"))
async def status_cmd(m: Message):
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–æ–∫
    last_ts = storage.get_meta("last_check_ts")
    checks_count = storage.get_meta("checks_count") or "0"
    if last_ts:
        dt = datetime.fromtimestamp(int(last_ts)).strftime("%Y-%m-%d %H:%M:%S")
        header = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {dt}\n–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
    else:
        header = "–ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –±—ã–ª–æ.\n"

    # –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∫–∞–∫–∏–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    items = storage.list_subs(m.from_user.id if m.from_user else 0)
    if not items:
        await m.answer(header + "\n–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.")
        return

    chunks = [header, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–≤–æ–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º:"]
    for s in items:
        chunks.append(
            f"\n#{s.id} {s.date_str} {s.from_name}({s.city_from_id}) ‚Üí {s.to_name}({s.city_to_id}) "
            f"–≤ {s.dep_from_hhmm}‚Äì{s.dep_to_hhmm}\n{format_last_results(s.last_hash)}"
        )

    # Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å ‚Äî –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∑–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    await m.answer("\n".join(chunks))

async def main():
    bot = Bot(TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    asyncio.create_task(checker_loop(bot))
    
    print("Bot started.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
